openapi: '3.0.3'
info:
  title: Post Management
  version: '1.0'
servers:
  - url: https://api.server/posts


components:
  schemas:
    createPost:
      type: object
      properties:
        userId:
          type: string
        text:
          type: string
        visibility:
          type: string

    postObject:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        creationTime:
          type: string
        content:
          type: string

    getResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#components/schemas/postObject'
          minItems: 0
        totalPosts:
          type: integer
  
    getPost:
      type: object
      properties:
        pageCount:
          type: integer
          description: The current page number to be fetched.
        limit:
          type: integer
        filter:
          type: object
          properties:
            includeusers:
              type: array
              items:
                type: string
              description: The response includes the posts only from these users. An array of userid's. includeusers and excludeusers are mutually exclusive list. Set only one property. If both are set, includeusers are only applicable
            excludeusers:
              type: array
              items:
                type: string
              description: The response excludes the posts only from these users. An array of userid's.includeusers and excludeusers are mutually exclusive list. Set only one property. If both are set, includeusers are only applicable
            visibility:
              type: string
              description: Filter to include either public or private posts. Omit this property to include both
        sort:
          type: object
          properties:
            field:
              type: string
            direction:
              type: string

    updatePost:
      type: object
      properties:
        text:
          type: string
    
  
paths:
  /:
    post:
      tags:
      - Posts
      summary: Create Post 
      description: Use this Endpoint to create the Posts. Input values for visibility can be public or private 
      requestBody: 
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/createPost'
          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                
              example:
                    success: true
                    message: Post created successfully
                    data: {postId: 1,
                          visibility: "public"}

        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: userId and text is the required parameter
                    
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: Please contact POST team 

    get:
      summary: Get all the posts
      description: Get all the posts
      tags:
      - Posts
      requestBody: 
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/getPost'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getResponse'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: "Failed to update Post as the input is invalid"

        '404':
          description: Post does not exist
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: "Failed to update Post as the existing post was not found"

        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: Please contact POST team
                   
  /{postId}:
    parameters:
      - in: path
        name: postId
        required: true
        schema:
          type: integer
    patch:
      tags:
      - Posts
      summary: Update Post 
      description: Use this Endpoint to update the Post
      requestBody: 
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/updatePost'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: true
                    message: Post updated successfully
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: Provide valid inputs
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: Please contact POST team

    delete:
      summary: "Delete a post"
      tags:
      - Posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: true
                    message: Post deleted successfully
        '404':
          description: "Post not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: Post not found


  /user/{userId}:
    delete:
      summary: "Delete all posts of an user"
      tags:
      - Posts
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: true
                    message: Post deleted for a particular user
        '404':
          description: "User or Post not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  message:
                    type: string
              example:
                    success: false
                    message: User or Post not found

    


