openapi: '3.0.3'
info:
  title: Post Management
  version: 'v1.0'
servers:
  - url: https://api.server/v1/
  - url: https://localhost:15001/v1/


components:
  schemas:
    createPost:
      type: object
      properties:
        userId:
          type: string
        text:
          type: string
        visibility:
          type: string

    postObject:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        creationTime:
          type: string
        content:
          type: string

    searchPostResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#components/schemas/postObject'
          minItems: 0
        totalPosts:
          type: integer

    searchPost:
      type: object
      properties:
        pageCount:
          type: integer
          description: The current page number to be fetched.
        limit:
          type: integer
        filter:
          type: object
          properties:
            userIds:
              type: array
              items:
                type: string
              description: The response includes the posts only from these users. An array of userid's.
            visibility:
              type: string
              description: Filter to include either public or private posts. Omit this property to include both
        sort:
          type: object
          properties:
            field:
              type: string
            direction:
              type: string

    updatePost:
      type: object
      properties:
        text:
          type: string
        active:
          type: boolean

paths:
  /posts:
    post:
      tags:
      - Posts
      summary: Create a Post
      description: Use this Endpoint to create the Posts. Input values for visibility can be public or private
      requestBody:
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/createPost'

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object

              example:
                    data: {postId: 1,
                          visibility: "public"}

        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: userId and text is the required parameter

        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Please contact POST team

  /posts/{postId}:
    parameters:
      - in: path
        name: postId
        required: true
        schema:
          type: integer
    get:
      tags:
      - Posts
      summary: Update Post
      description: Use this Endpoint to update the Post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:

                    post: {postId: 1, text: "post texts", visibility: "private"}
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: POST for the requested id does not exists.
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Something went wrong, Please contact POST team
    put:
      tags:
      - Posts
      summary: Update Post
      description: Use this Endpoint to update the Post
      requestBody:
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/updatePost'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Post updated successfully
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Provide valid inputs
        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Please contact POST team

    delete:
      summary: "Delete a post"
      tags:
      - Posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Post deleted successfully
        '404':
          description: "Post not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Post not found


  /posts/user/{userId}:
    delete:
      summary: "Delete all posts of an user"
      tags:
      - Posts
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Post deleted for a particular user
        '404':
          description: "User or Post not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: User or Post not found
  /searchposts:
    post:
      summary: Lists the posts from users in pagination
      description: This API provides the list of APIs in pagination
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/searchPost'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchPostResponse'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "Provide valid filters."

        '500':
          description: Internal server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                    message: Something went wrong. Please contact POST team
